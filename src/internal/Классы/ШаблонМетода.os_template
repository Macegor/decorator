// {АннотацияМетода}
{Функция} Декоратор_ИмяМетода(Декоратор_ОписаниеПараметровМетода) // {Экспорт}
	
	Декоратор_ЗначениеПоля = Декоратор_Рефлектор.ПолучитьСвойство(
		ЭтотОбъект,
		Константы_Декоратор.Поле_ИнстансОбъекта
	);

	Если {Декоратор_ЭтоДекорируемыйМетод} Тогда
		ОбработкаДекоратора.СинхронизироватьПоля(ЭтотОбъект, Декоратор_ЗначениеПоля);
	Иначе
		ОбработкаДекоратора.СинхронизироватьПоля(Декоратор_ЗначениеПоля, ЭтотОбъект);
	КонецЕсли;

	Декоратор_ВозвращаемоеИзМетодаЗначение = NULL;

	// {Декоратор_ПередВызовомМетода}
	
	// {Декоратор_ВыполняемаяСтрока}
	// {Декоратор_ТипМетода}

	Декоратор_Лог.Отладка(Декоратор_ВыполняемаяСтрока);
	Декоратор_Лог.Отладка(Декоратор_ТипМетода);

	Если Декоратор_ТипМетода Тогда
		Декоратор_ВозвращаемоеИзМетодаЗначение = Вычислить(Декоратор_ВыполняемаяСтрока);
	Иначе
		Выполнить(Декоратор_ВыполняемаяСтрока);
	КонецЕсли;

	Если {Декоратор_ЭтоДекорируемыйМетод} Тогда
		ОбработкаДекоратора.СинхронизироватьПоля(Декоратор_ЗначениеПоля, ЭтотОбъект);
	Иначе
		ОбработкаДекоратора.СинхронизироватьПоля(ЭтотОбъект, Декоратор_ЗначениеПоля);
	КонецЕсли;

	Если Декоратор_ВозвращаемоеИзМетодаЗначение = Декоратор_ЗначениеПоля Тогда
		Декоратор_ВозвращаемоеИзМетодаЗначение = ЭтотОбъект;
	КонецЕсли;

	// {Декоратор_ПослеВызоваМетода}

	// {Декоратор_ВозвращаемоеЗначение}

{КонецФункции}

{Функция} ДекораторВнутренний_ИмяМетода(Декоратор_ОписаниеПараметровМетода)

	// {Декоратор_ТекстМетода}

{КонецФункции}
