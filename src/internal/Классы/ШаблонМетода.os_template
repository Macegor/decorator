// {АннотацияМетода}
{Функция} Декоратор_ИмяМетода(Декоратор_ОписаниеПараметровМетода) // {Экспорт}

	Если {Декоратор_ЭтоДекорируемыйМетод} Тогда
		ОбработкаДекоратора.СинхронизироватьПоля(ЭтотОбъект, Декоратор_ИсходныйОбъект);
	Иначе
		// Для будущих археологов, если вы подумаете что нужно тут добавить 
		// ОбработкаДекоратора.СинхронизироватьПоля(Декоратор_ИсходныйОбъект, ЭтотОбъект);
		// то проверьте что работает АктивнаяЗапись в библиотеки entity
		// сейчас этого куска нет потому что при его наличии в декораторе задавятся поля 
		// декоратора которые были заполнены не через методы, а просто установкой свойств.
	КонецЕсли;

	Декоратор_ВозвращаемоеИзМетодаЗначение = NULL;

	// {Декоратор_ПередВызовомМетода}

	// {Декоратор_ВыполняемаяСтрока};

	Если {Декоратор_ЭтоДекорируемыйМетод} Тогда
		ОбработкаДекоратора.СинхронизироватьПоля(Декоратор_ИсходныйОбъект, ЭтотОбъект);
	Иначе
		ОбработкаДекоратора.СинхронизироватьПоля(ЭтотОбъект, Декоратор_ИсходныйОбъект);
	КонецЕсли;

	Если Декоратор_ВозвращаемоеИзМетодаЗначение = Декоратор_ИсходныйОбъект Тогда
		Декоратор_ВозвращаемоеИзМетодаЗначение = ЭтотОбъект;
	КонецЕсли;

	// {Декоратор_ПослеВызоваМетода}

	// {Декоратор_ВозвращаемоеЗначение}

{КонецФункции}

{Функция} ДекораторВнутренний_ИмяМетода(Декоратор_ОписаниеПараметровМетода)

	// {Декоратор_ТекстМетода}

{КонецФункции}
